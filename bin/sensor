#!/bin/sh

case $1 in
        top)
                list=$(ps --no-headers -eo comm,%cpu,%mem --sort=-%mem | head -5)
                list2=$(ps --no-headers -eo exe,tty,%cpu,%mem,state --sort=-%mem | head -5)
                printf '{\n'
                for item in command cpu memory state; do
                        printf '"%s": [\n' "$item"
                        count=0
                        while IFS= read -r line; do
                                case $item in
                                        command)
                                        printf '"%s"' $(echo $line | cut -d'?' -f1)
                                        ;;
                                        cpu)
                                        printf '"%s"' $(echo $line | cut -d'?' -f2 | cut -d' ' -f2)
                                        ;;
                                        memory)
                                        printf '"%s"' $(echo $line | cut -d'?' -f2 | cut -d' ' -f3)
                                        ;;
                                        state)
                                        printf '"%s"' $(echo $line | cut -d'?' -f2 | cut -d' ' -f4)
                                        ;;
                                esac
                                if [ $count != 4 ]; then
                                        printf ',\n'
                                elif [ $count == 4 ]; then
                                        printf '\n'
                                fi
                                count=$((count+1))
                        done <<< "$list2"
                        if [ $item != state ]; then
                                printf '],'
                        else
                                printf ']\n'
                        fi
                done
                printf '}'
        ;;
        cpu|c)
                sensors | grep 'Package id 0:' | cut -c17-20
        ;;
        core0|c0)
                sensors | grep 'Core 0:' | cut -c17-20
        ;;
        core1|c1)
                sensors | grep 'Core 1:' | cut -c17-20
        ;;
        core2|c2)
                sensors | grep 'Core 2:' | cut -c17-20
        ;;
        core3|c3)
                sensors | grep 'Core 3:' | cut -c17-20
        ;;
        fan1|f1)
                sensors | grep 'fan1:' | sed 's/[^.0-9][^.0-9]*/:/g'  | cut -d":" -f3
        ;;
        fan2|f2)
                sensors | grep 'fan2:' | sed 's/[^.0-9][^.0-9]*/:/g'  | cut -d":" -f3
        ;;
        fan3|f3)
                sensors | grep 'fan3:' | sed 's/[^.0-9][^.0-9]*/:/g'  | cut -d":" -f3
        ;;
        updates|u)
                number=$(sudo apt-get upgrade -s | /usr/bin/grep -P '^\d+ upgraded' | cut -d" " -f1)
                packages=$(sudo apt list --upgradeable 2>/dev/null | /usr/bin/grep / | cut -d"/" -f1 | sed ':a;N;$!ba;s/\n/,/g')
                printf '{"number":"%s","packages":"%s"}\n' "$number" "$packages" 
        ;;
        load|l)
                awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1); }' <(grep 'cpu ' /proc/stat) <(sleep 1;grep 'cpu ' /proc/stat)
        ;;
        mem_per|mp)
                total=$(free -m | grep Mem: | sed 's/[^.0-9][^.0-9]*/:/g' | cut -d: -f2)
                used=$(free -m | grep Mem: | sed 's/[^.0-9][^.0-9]*/:/g' | cut -d: -f3)
                echo "scale=1;$used*100/$total" | bc
        ;;
        mem_total|mt)
                free -m | grep Mem: | sed 's/[^.0-9][^.0-9]*/:/g' | cut -d":" -f2
        ;;
        mem_used|mu)
                free -m | grep Mem: | sed 's/[^.0-9][^.0-9]*/:/g' | cut -d":" -f3
        ;;
        mem_free|mf)
                free -m | grep Mem: | sed 's/[^.0-9][^.0-9]*/:/g' | cut -d":" -f4
        ;;
        last-boot)
                uptime -s
        ;;
        smart)
                smartctl -a -j $2
        ;;
## terraserver
        rpool-old)
                zpool list -o name,cap | grep rpool | sed 's/[^.0-9][^.0-9]*//g' | sed "s/%//g"
        ;;
        tank-pool-old)
                zpool list -o name,cap | grep tank-pool | sed 's/[^.0-9][^.0-9]*//g' | sed "s/%//g"
        ;;
        rpool)
                name=$(zpool list -o name,size | grep rpool | awk '{print $1}')
                size=$(zpool list -o name,size | grep rpool | awk '{print $2}')
                alloc=$(zpool list -o name,alloc | grep rpool | awk '{print $2}')
                free=$(zpool list -o name,free | grep rpool | awk '{print $2}')
                used=$(zpool list -o name,cap | grep rpool | awk '{print $2}' | sed 's/[^.0-9][^.0-9]*//g')
                frag=$(zpool list -o name,frag | grep rpool | awk '{print $2}' | sed 's/[^.0-9][^.0-9]*//g')
                printf '{"name":"%s","size":"%s","allocated":"%s","free":"%s","used":"%s","fragmentation":"%s"}\n' "$name" "$size" "$alloc" "$free" "$used" "$frag"
        ;;
        tank-pool)
                name=$(zpool list -o name,size | grep tank-pool | awk '{print $1}')
                size=$(zpool list -o name,size | grep tank-pool | awk '{print $2}')
                alloc=$(zpool list -o name,alloc | grep tank-pool | awk '{print $2}')
                free=$(zpool list -o name,free | grep tank-pool | awk '{print $2}')
                used=$(zpool list -o name,cap | grep tank-pool | awk '{print $2}' | sed 's/[^.0-9][^.0-9]*//g')
                frag=$(zpool list -o name,frag | grep tank-pool | awk '{print $2}' | sed 's/[^.0-9][^.0-9]*//g')
                printf '{"name":"%s","size":"%s","allocated":"%s","free":"%s","used":"%s","fragmentation":"%s"}\n' "$name" "$size" "$alloc" "$free" "$used" "$frag"
        ;;
        scrub-rpool)
                running=$(zpool status rpool | grep -c 'in progress')
                paused=$(zpool status rpool | grep -c 'paused')
                last=$(zpool status rpool | grep 'repaired' | awk '{print $13" "$12" "$14}' | cut -d":" -f1-2)
                last_date=$(zpool status rpool | grep 'repaired' | awk -F 'on' '{print $2}')
                last_iso=$(date -d "$last_date" +"%Y-%m-%dT%H:%M:%SZ")
                percentage=$(zpool status rpool | grep done | awk '{print $3}' | sed "s/%//g")
                remaining=$(zpool status rpool | grep 'to go' | cut -d"," -f3 | cut -d":" -f1-2)
                speed=$(zpool status rpool | grep 'issued at'  | awk '{print $NF}' | sed 's/[^.0-9][^.0-9]*//g')
                last_duration=$(zpool status rpool | grep 'repaired' | awk -F 'in ' '{print $2}' | awk -F ' with' '{print $1}' | cut -d":" -f1-2)
                if [ $running -eq 1 ]; then
                        status="running"
                elif [ $paused -eq 1 ]; then
                        status="paused"
                else
                        status="stopped"
                fi
                printf '{"status":"%s","percentage":"%s","remaining":"%s","speed":"%s","last":"%s","last_duration":"%s"}\n' "$status" "$percentage" "$remaining" "$speed" "$last_iso" "$last_duration"
        ;;
        scrub-tank)
                running=$(zpool status tank-pool | grep -c 'in progress')
                paused=$(zpool status tank-pool | grep -c 'paused')
                last=$(zpool status tank-pool | grep 'repaired' | awk '{print $13" "$12" "$14}' | cut -d":" -f1-2)
                last_date=$(zpool status tank-pool | grep 'repaired' | awk -F 'on' '{print $2}')
                last_iso=$(date -d "$last_date" +"%Y-%m-%dT%H:%M:%SZ")
                percentage=$(zpool status tank-pool | grep done | awk '{print $3}' | sed "s/%//g")
                remaining=$(zpool status tank-pool | grep 'to go' | cut -d"," -f3 | cut -d":" -f1-2)
                speed=$(zpool status tank-pool | grep 'issued at'  | awk '{print $NF}' | sed 's/[^.0-9][^.0-9]*//g')
                last_duration=$(zpool status tank-pool | grep 'repaired' | awk -F 'in ' '{print $2}' | awk -F ' with' '{print $1}' | cut -d":" -f1-2)
                if [ $running -eq 1 ]; then
                        status="running"
                elif [ $paused -eq 1 ]; then
                        status="paused"
                else
                        status="stopped"
                fi
                printf '{"status":"%s","percentage":"%s","remaining":"%s","speed":"%s","last":"%s","last_duration":"%s"}\n' "$status" "$percentage" "$remaining" "$speed" "$last_iso" "$last_duration"
        ;;
## miniserver
        local-pool)
                name=$(pvs --noheadings -o pv_name | awk '{ printf $1 }')
                size=$(pvs --units G --noheadings -o pv_name,pv_size | awk '{ printf $2 }')
                alloc=$(pvs --units G --noheadings -o pv_name,pv_used | awk '{ printf $2 }')
                free=$(pvs --units G --noheadings -o pv_name,pv_free | awk '{ printf $2 }')
                used=$(pvs --units b --no-suffix --noheadings -o pv_name,pv_size,pv_used | awk '{ printf $3 * 100 / $2 }')
                printf '{"name":"%s","size":"%s","allocated":"%s","free":"%s","used":"%s"}\n' "$name" "$size" "$alloc" "$free" "$used"
        ;;
        local-root)
                name=$(lsblk -ao NAME,NAME | grep pve-root | awk '{ printf $2 }')
                size=$(lsblk -ao NAME,SIZE | grep pve-root | awk '{ printf $2 }')
                alloc=$(lsblk -ao NAME,FSUSED | grep pve-root | awk '{ printf $2 }')
                free=$(lsblk -ao NAME,FSAVAIL | grep pve-root | awk '{ printf $2 }')
                used=$(lsblk -ao NAME,FSUSE% | grep pve-root | sed "s/%//g" | awk '{ printf $2 }')
                printf '{"name":"%s","size":"%s","allocated":"%s","free":"%s","used":"%s"}\n' "$name" "$size" "$alloc" "$free" "$used"
        ;;
        local-lvm)
                lvname=$(lvdisplay /dev/pve/data --units G -C  | grep data | awk '{ printf $1 }')
                vgname=$(lvdisplay /dev/pve/data --units G -C  | grep data | awk '{ printf $2 }')
                size=$(lvdisplay /dev/pve/data --units G -C  | grep data | awk '{ printf $4 }')
                used=$(lvdisplay /dev/pve/data --units G -C  | grep data | awk '{ printf $5 }')
                printf '{"lvname":"%s","vgname":"%s","size":"%s","used":"%s"}\n' "$lvname" "$vgname" "$size" "$used"
        ;;
        local-backup)
                name=$(df -h | grep "tank-pool" | awk '{ printf $1 }')
                size=$(df -h | grep "tank-pool" | awk '{ printf $2 }')
                alloc=$(df -h | grep "tank-pool" | awk '{ printf $3 }')
                free=$(df -h | grep "tank-pool" | awk '{ printf $4 }')
                used=$(df -h | grep "tank-pool" | sed "s/%//g" | awk '{ printf $5 }')
                printf '{"name":"%s","size":"%s","allocated":"%s","free":"%s","used":"%s"}\n' "$name" "$size" "$alloc" "$free" "$used"
        ;;
## sticktop
        root)
                name=$(df -h | grep "mmcblk0p2" | awk '{ printf $1 }')
                size=$(df -h | grep "mmcblk0p2" | awk '{ printf $2 }')
                alloc=$(df -h | grep "mmcblk0p2" | awk '{ printf $3 }')
                free=$(df -h | grep "mmcblk0p2" | awk '{ printf $4 }')
                used=$(df -h | grep "mmcblk0p2" | sed "s/%//g" | awk '{ printf $5 }')
                mount=$(df -h | grep "mmcblk0p2" | awk '{ printf $6 }')
                printf '{"name":"%s","size":"%s","allocated":"%s","free":"%s","used":"%s","mount":"%s"}\n' "$name" "$size" "$alloc" "$free" "$used" "$mount"
        ;;
        home)
                name=$(df -h | grep "mmcblk0p4" | awk '{ printf $1 }')
                size=$(df -h | grep "mmcblk0p4" | awk '{ printf $2 }')
                alloc=$(df -h | grep "mmcblk0p4" | awk '{ printf $3 }')
                free=$(df -h | grep "mmcblk0p4" | awk '{ printf $4 }')
                used=$(df -h | grep "mmcblk0p4" | sed "s/%//g" | awk '{ printf $5 }')
                mount=$(df -h | grep "mmcblk0p4" | awk '{ printf $6 }')
                printf '{"name":"%s","size":"%s","allocated":"%s","free":"%s","used":"%s","mount":"%s"}\n' "$name" "$size" "$alloc" "$free" "$used" "$mount"
        ;;
esac
